"use strict";(self.webpackChunksoftware_construction=self.webpackChunksoftware_construction||[]).push([[6001],{1470:(e,n,s)=>{s.d(n,{A:()=>I});var r=s(6540),t=s(4164),o=s(3104),i=s(6347),a=s(205),l=s(7485),d=s(1682),c=s(679);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:s}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:s,default:r}})=>({value:e,label:n,attributes:s,default:r}))}(s);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function h({queryString:e=!1,groupId:n}){const s=(0,i.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(t),(0,r.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(s.location.search);n.set(t,e),s.replace({...s.location,search:n.toString()})},[t,s])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:t}=e,o=p(e),[i,l]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o})),[d,u]=h({queryString:s,groupId:t}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,t]=(0,c.Dv)(n);return[s,(0,r.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),f=(()=>{const e=d??x;return m({value:e,tabValues:o})?e:null})();(0,a.A)(()=>{f&&l(f)},[f]);return{selectedValue:i,selectValue:(0,r.useCallback)(e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)},[u,g,o]),tabValues:o}}var g=s(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=s(4848);function j({className:e,block:n,selectedValue:s,selectValue:r,tabValues:i}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),d=e=>{const n=e.currentTarget,t=a.indexOf(n),o=i[t].value;o!==s&&(l(n),r(o))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=a.indexOf(e.currentTarget)+1;n=a[s]??a[0];break}case"ArrowLeft":{const s=a.indexOf(e.currentTarget)-1;n=a[s]??a[a.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:r})=>(0,y.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{a.push(e)},onKeyDown:c,onClick:d,...r,className:(0,t.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function b({lazy:e,children:n,selectedValue:s}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===s);return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function C(e){const n=x(e);return(0,y.jsxs)("div",{className:(0,t.A)("tabs-container",f.tabList),children:[(0,y.jsx)(j,{...n,...e}),(0,y.jsx)(b,{...n,...e})]})}function I(e){const n=(0,g.A)();return(0,y.jsx)(C,{...e,children:u(e.children)},String(n))}},5530:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"modern_software_architecture_and_design/designing_use_cases_and_entities","title":"Dise\xf1o de casos de uso y entidades","description":"Una entidad representa un objeto del dominio que tiene identidad propia y que permanece consistente a lo largo del tiempo, incluso si sus atributos cambian. Ejemplo: Un estudiante con ID \xfanico, nombre y correo. Aunque cambie el correo, sigue siendo el mismo estudiante.","source":"@site/docs/02_modern_software_architecture_and_design/06_designing_use_cases_and_entities.md","sourceDirName":"02_modern_software_architecture_and_design","slug":"/modern_software_architecture_and_design/designing_use_cases_and_entities","permalink":"/Software_Construction/docs/modern_software_architecture_and_design/designing_use_cases_and_entities","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_modern_software_architecture_and_design/06_designing_use_cases_and_entities.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Arquitectura modular monol\xedtica","permalink":"/Software_Construction/docs/modern_software_architecture_and_design/monolithic_modular_architecture"},"next":{"title":"Ejercicios propuesto por tema","permalink":"/Software_Construction/docs/modern_software_architecture_and_design/exercise"}}');var t=s(4848),o=s(8453),i=s(1470),a=s(9365);const l={sidebar_position:6},d="Dise\xf1o de casos de uso y entidades",c={},u=[{value:"Relaci\xf3n entre ambos",id:"relaci\xf3n-entre-ambos",level:2},{value:"Buenas pr\xe1cticas",id:"buenas-pr\xe1cticas",level:2},{value:"Ejemplo t\xe9cnico en NestJS",id:"ejemplo-t\xe9cnico-en-nestjs",level:2},{value:"Referencias",id:"referencias",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dise\xf1o-de-casos-de-uso-y-entidades",children:"Dise\xf1o de casos de uso y entidades"})}),"\n",(0,t.jsxs)(n.p,{children:["Una ",(0,t.jsx)(n.strong,{children:"entidad"})," representa un objeto del dominio que tiene ",(0,t.jsx)(n.strong,{children:"identidad propia"})," y que permanece consistente a lo largo del tiempo, incluso si sus atributos cambian. Ejemplo: Un estudiante con ID \xfanico, nombre y correo. Aunque cambie el correo, sigue siendo el mismo estudiante."]}),"\n",(0,t.jsxs)(n.p,{children:["Un ",(0,t.jsx)(n.strong,{children:"caso de uso"})," representa una ",(0,t.jsx)(n.strong,{children:"acci\xf3n"})," o ",(0,t.jsx)(n.strong,{children:"comportamiento del sistema"})," que produce valor para un actor (usuario o sistema externo). Define ",(0,t.jsx)(n.strong,{children:"lo que el sistema hace"})," en t\xe9rminos de negocio, sin preocuparse por c\xf3mo se implementa. Ejemplo: Registrar un estudiante, asignarlo a un curso, generar certificado, etc."]}),"\n",(0,t.jsx)(n.h2,{id:"relaci\xf3n-entre-ambos",children:"Relaci\xf3n entre ambos"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Un ",(0,t.jsx)(n.strong,{children:"caso de uso"})," opera sobre ",(0,t.jsx)(n.strong,{children:"una o m\xe1s entidades"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Las entidades contienen la l\xf3gica ",(0,t.jsx)(n.strong,{children:"inmutable"})," del dominio, mientras que los casos de uso representan la ",(0,t.jsx)(n.strong,{children:"interacci\xf3n din\xe1mica"})," con ese dominio."]}),"\n",(0,t.jsxs)(n.li,{children:["En Clean Architecture, los casos de uso viven en la capa ",(0,t.jsx)(n.code,{children:"application"}),", y las entidades en la capa ",(0,t.jsx)(n.code,{children:"domain"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"buenas-pr\xe1cticas",children:"Buenas pr\xe1cticas"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Aspecto"}),(0,t.jsx)(n.th,{children:"Recomendaci\xf3n"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Entidades"}),(0,t.jsx)(n.td,{children:"Evita poner l\xf3gica de infraestructura o frameworks"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Casos de uso"}),(0,t.jsx)(n.td,{children:"Un solo prop\xf3sito por clase (SRP)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Nombres"}),(0,t.jsxs)(n.td,{children:["Usa verbos para casos de uso: ",(0,t.jsx)(n.code,{children:"Create"}),", ",(0,t.jsx)(n.code,{children:"List"}),", ",(0,t.jsx)(n.code,{children:"Update"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Pruebas"}),(0,t.jsx)(n.td,{children:"Prueba casos de uso con mocks de repositorios"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Contratos"}),(0,t.jsxs)(n.td,{children:["Define interfaces (",(0,t.jsx)(n.code,{children:"ports"}),") para comunicarse entre capas"]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"ejemplo-t\xe9cnico-en-nestjs",children:"Ejemplo t\xe9cnico en NestJS"}),"\n",(0,t.jsx)(n.p,{children:"Cuando un estudiante se inscribe en un curso, debemos:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verificar que el estudiantes existe"}),"\n",(0,t.jsx)(n.li,{children:"Verificar que el curso existe"}),"\n",(0,t.jsx)(n.li,{children:"Agregar el ID del curso a la lista de cursos del estudiante"}),"\n",(0,t.jsx)(n.li,{children:"Guardar la inscripci\xf3n"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"El scaffold del proyecto ser\xeda:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"src/\n\u251c\u2500\u2500 domain/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u251c\u2500\u2500 student.entity.ts\n\u2502   \u2502   \u2514\u2500\u2500 course.entity.ts\n\u2502   \u251c\u2500\u2500 repositories/\n\u2502   \u2502   \u251c\u2500\u2500 student.repository.ts\n\u2502   \u2502   \u2514\u2500\u2500 course.repository.ts\n\u251c\u2500\u2500 application/\n\u2502   \u2514\u2500\u2500 use-cases/\n\u2502       \u2514\u2500\u2500 enroll-student-in-course.usecase.ts\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 db/\n\u2502       \u251c\u2500\u2500 student.repository.impl.ts\n\u2502       \u2514\u2500\u2500 course.repository.impl.ts\n\u251c\u2500\u2500 modules/\n\u2502   \u2514\u2500\u2500 enrollment/\n\u2502       \u251c\u2500\u2500 enrollment.module.ts\n\u2502       \u251c\u2500\u2500 enrollment.controller.ts\n\u2502       \u2514\u2500\u2500 dto/\n\u2502           \u2514\u2500\u2500 enroll.dto.ts\n"})}),"\n",(0,t.jsx)(n.mermaid,{value:"classDiagram\n    %% Entidades del dominio\n    class Student {\n        +string id\n        +string name\n        +string email\n        -string[] enrolledCourseIds\n        +constructor(id, name, email)\n        +enroll(courseId: string): void\n        +getCourses(): string[]\n    }\n\n    class Course {\n        +string id\n        +string name\n        +number capacity\n        +constructor(id, name, capacity)\n    }\n\n    %% Contratos del dominio\n    class StudentRepository {\n        <<interface>>\n        +findById(id: string): Promise<Student | null>\n        +save(student: Student): Promise<void>\n    }\n\n    class CourseRepository {\n        <<interface>>\n        +findById(id: string): Promise<Course | null>\n    }\n\n    %% Infraestructura\n    class InMemoryStudentRepository {\n        -Map<string, Student> students\n        +constructor()\n        +findById(id: string): Promise<Student | null>\n        +save(student: Student): Promise<void>\n        +findAll(): Promise<Student[]>\n    }\n\n    class InMemoryCourseRepository {\n        -Map<string, Course> courses\n        +constructor()\n        +findById(id: string): Promise<Course | null>\n        +findAll(): Promise<Course[]>\n    }\n\n    %% Caso de uso\n    class EnrollStudentInCourseUseCase {\n        -StudentRepository studentRepo\n        -CourseRepository courseRepo\n        +constructor(studentRepo: StudentRepository, courseRepo: CourseRepository)\n        +execute(studentId: string, courseId: string): Promise<void>\n    }\n\n    %% Interfaces\n    class EnrollmentController {\n        +constructor(enrollStudent: EnrollStudentInCourseUseCase)\n        +enroll(dto: EnrollDto): Promise~string~\n    }\n\n    class EnrollDto {\n        +string studentId\n        +string courseId\n    }\n\n    class EnrollmentModule\n\n    %% Relaciones\n    StudentRepository <|.. InMemoryStudentRepository\n    CourseRepository <|.. InMemoryCourseRepository\n\n    EnrollStudentInCourseUseCase --\x3e StudentRepository\n    EnrollStudentInCourseUseCase --\x3e CourseRepository\n    EnrollStudentInCourseUseCase --\x3e Student\n    EnrollStudentInCourseUseCase --\x3e Course\n\n    EnrollmentModule --\x3e EnrollStudentInCourseUseCase\n    EnrollmentModule --\x3e InMemoryStudentRepository\n    EnrollmentModule --\x3e InMemoryCourseRepository\n\n    EnrollmentController --\x3e EnrollStudentInCourseUseCase\n    EnrollmentController --\x3e EnrollDto"}),"\n","\n",(0,t.jsxs)(i.A,{children:[(0,t.jsxs)(a.A,{value:"domain",label:"Domain",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/domain/entities/student.entity.ts" showLineNumbers',children:"export class Student {\n  constructor(\n    public readonly id: string,\n    public name: string,\n    public email: string,\n    private enrolledCourseIds: string[] = []\n  ) {}\n\n  enroll(courseId: string) {\n    if (!this.enrolledCourseIds.includes(courseId)) {\n      this.enrolledCourseIds.push(courseId);\n    }\n  }\n\n  getCourses() {\n    return this.enrolledCourseIds;\n  }\n}\n"})}),(0,t.jsxs)(n.p,{children:["La clase ",(0,t.jsx)(n.code,{children:"Student"})," es una entidad del dominio. Representa un estudiante del cual debe mantener sus propios datos (",(0,t.jsx)(n.code,{children:"id"}),", ",(0,t.jsx)(n.code,{children:"name"}),", ",(0,t.jsx)(n.code,{children:"email"}),", ",(0,t.jsx)(n.code,{children:"enrolledCourses"}),"), adem\xe1s de tener m\xe9todos que modifican su estado internamente. Es usada por el caso de uso y persistida mediante ",(0,t.jsx)(n.code,{children:"StudentRepository"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/domain/entities/course.entity.ts" showLineNumbers',children:"export class Course {\n  constructor(\n    public readonly id: string,\n    public name: string,\n    public capacity: number\n  ) {}\n}\n"})}),(0,t.jsxs)(n.p,{children:["Al igual que ",(0,t.jsx)(n.code,{children:"Student"}),", la entidad ",(0,t.jsx)(n.code,{children:"Course"})," se encarga de representar un curso con sus atributos y modelarlo para inscripci\xf3n. Es usado por el caso de uso para validar si un curso existe antes de inscribir un estudiante en el mismo."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/domain/repositories/student.repository.ts" showLineNumbers',children:"import { Student } from '../entities/student.entity';\n\nexport abstract class StudentRepository {\n  abstract findById(id: string): Promise<Student | null>;\n  abstract save(student: Student): Promise<void>;\n}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"StudentRepository"})," es un contracto abstracto que define c\xf3mo acceder o modificar estudiantes, ",(0,t.jsx)(n.strong,{children:"sin implementar la l\xf3gica concreta"}),". Se encarga de definir m\xe9todos como interfaz para infraestructura. Es implementada por ",(0,t.jsx)(n.code,{children:"InMemoryStudentRepository"})," y consumida por el caso de uso."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/domain/repositories/course.repository.ts" showLineNumbers',children:"import { Course } from '../entities/course.entity';\n\nexport abstract class CourseRepository {\n  abstract findById(id: string): Promise<Course | null>;\n}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"CourseRepository"})," es un contracto abstracto que define c\xf3mo acceder a cursos."]})]}),(0,t.jsxs)(a.A,{value:"app",label:"Application",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/application/use-cases/enroll-student-in-course.usecase.ts" showLineNumbers',children:"import { StudentRepository } from '../../domain/repositories/student.repository';\nimport { CourseRepository } from '../../domain/repositories/course.repository';\n\nexport class EnrollStudentInCourseUseCase {\n  constructor(\n    private readonly studentRepo: StudentRepository,\n    private readonly courseRepo: CourseRepository\n  ) {}\n\n  async execute(studentId: string, courseId: string): Promise<void> {\n    const student = await this.studentRepo.findById(studentId);\n    if (!student) throw new Error('Student not found');\n\n    const course = await this.courseRepo.findById(courseId);\n    if (!course) throw new Error('Course not found');\n\n    student.enroll(course.id);\n    await this.studentRepo.save(student);\n  }\n}\n"})}),(0,t.jsxs)(n.p,{children:["El caso de uso ",(0,t.jsx)(n.code,{children:"EnrollStudentInCourseUseCase"})," orquesta la l\xf3gica de negocio para inscribir un estudiante en un curso. Se encarga de verificar que estudiante y curso existen, invoca m\xe9todos de entidades, y persiste cambios usando el repositorio. Depende de los contratos abstractos, ya que opera sobre entidades del dominio, pero no sabe c\xf3mo se implementan los repositorios gracias al DIP (Principio de inversi\xf3n de dependencias)."]})]}),(0,t.jsxs)(a.A,{value:"infra",label:"Infrastructure",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/infrastructure/db/student.repository.impl.ts" showLineNumbers',children:"import { StudentRepository } from '../../domain/repositories/student.repository';\nimport { Student } from '../../domain/entities/student.entity';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class InMemoryStudentRepository implements StudentRepository {\n  private students: Map<string, Student> = new Map();\n\n  constructor() {\n    // Datos iniciales simulados\n    const student = new Student('stu1', 'Alice', 'alice@email.com');\n    this.students.set(student.id, student);\n  }\n\n  async findById(id: string): Promise<Student | null> {\n    return this.students.get(id) || null;\n  }\n\n  async save(student: Student): Promise<void> {\n    this.students.set(student.id, student);\n  }\n\n  // M\xe9todo adicional para pruebas\n  async findAll(): Promise<Student[]> {\n    return Array.from(this.students.values());\n  }\n}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"InMemoryStudentRepository"})," es un adaptador concreto que implementa la interfaz ",(0,t.jsx)(n.code,{children:"StudentRepository"})," usando solo memoria. Se encarga de simular una base de datos de estudiantes, ofrecer persistencia temporal para pruebas o prototipos."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/infrastructure/db/course.repository.impl.ts" showLineNumbers',children:"import { CourseRepository } from '../../domain/repositories/course.repository';\nimport { Course } from '../../domain/entities/course.entity';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class InMemoryCourseRepository implements CourseRepository {\n  private courses: Map<string, Course> = new Map();\n\n  constructor() {\n    // Curso simulado\n    const course = new Course('course1', 'Clean Architecture', 25);\n    this.courses.set(course.id, course);\n  }\n\n  async findById(id: string): Promise<Course | null> {\n    return this.courses.get(id) || null;\n  }\n\n  // M\xe9todo adicional para pruebas\n  async findAll(): Promise<Course[]> {\n    return Array.from(this.courses.values());\n  }\n}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"InMemoryCourseRepository"})," es un adaptador concreto que implementa la interfaz ",(0,t.jsx)(n.code,{children:"CourseRepository"}),". Provee una lista de cursos simulada y otras funcionalidades relacionadas a los cursos."]})]}),(0,t.jsxs)(a.A,{value:"controller",label:"Controller",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/modules/enrollment/enrollment.controller.ts" showLineNumbers',children:"import { Controller, Post, Body, HttpCode, HttpException, HttpStatus } from '@nestjs/common';\nimport { EnrollStudentInCourseUseCase } from 'src/application/use-cases/enroll-student-in-course.usecase';\nimport { EnrollDto } from './dto/enroll.dto';\n\n@Controller('enrollment')\nexport class EnrollmentController {\n  constructor(private readonly enrollStudent: EnrollStudentInCourseUseCase) {}\n\n  @Post()\n  @HttpCode(201)\n  async enroll(@Body() dto: EnrollDto): Promise<{ message: string }> {\n    try {\n      await this.enrollStudent.execute(dto.studentId, dto.courseId);\n      return { message: 'Estudiante inscrito exitosamente' };\n    } catch (error) {\n      throw new HttpException(\n        { message: error.message },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/modules/enrollment/dto/enroll.dto.ts" showLineNumbers',children:"import { IsString, IsUUID } from 'class-validator';\n\nexport class EnrollDto {\n  @IsString()\n  studentId: string;\n\n  @IsString()\n  courseId: string;\n}\n"})})]}),(0,t.jsxs)(a.A,{value:"module",label:"EnrollmentModule",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="src/modules/enrollment/enrollment.module.ts" showLineNumbers',children:"import { Module } from '@nestjs/common';\nimport { EnrollStudentInCourseUseCase } from 'src/application/use-cases/enroll-student-in-course.usecase';\nimport { StudentRepository } from 'src/domain/repositories/student.repository';\nimport { CourseRepository } from 'src/domain/repositories/course.repository';\nimport { InMemoryStudentRepository } from 'src/infrastructure/db/student.repository.impl';\nimport { InMemoryCourseRepository } from 'src/infrastructure/db/course.repository.impl';\nimport { EnrollmentController } from './enrollment.controller';\n\n@Module({\n  controllers: [EnrollmentController],\n  providers: [\n    EnrollStudentInCourseUseCase,\n    { provide: StudentRepository, useClass: InMemoryStudentRepository },\n    { provide: CourseRepository, useClass: InMemoryCourseRepository },\n  ],\n})\nexport class EnrollmentModule {}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"EnrollmentModule"})," es un m\xf3dulo NestJS, y ",(0,t.jsx)(n.strong,{children:"orquesta las dependencias"})," necesarias para el caso de uso ",(0,t.jsx)(n.code,{children:"EnrollStudentInCourse"}),". Se encarga de registrar el caso de uso c\xf3mo un provider, de asociar interfaces con implementaciones, y tambi\xe9n registrar el controlador REST. Es el punto de entrada para el principio IoC (Inversi\xf3n de control), y expone el caso de uso para ser consumido por un controlador o por otros m\xf3dulos."]})]})]}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant UI as Cliente HTTP\n    participant Controller as EnrollmentController\n    participant UseCase as EnrollStudentInCourseUseCase\n    participant StudentRepo as StudentRepository\n    participant CourseRepo as CourseRepository\n    participant Student as Student Entity\n\n    UI->>Controller: POST /enrollment { studentId, courseId }\n    Controller->>UseCase: execute(studentId, courseId)\n    UseCase->>StudentRepo: findById(studentId)\n    UseCase->>CourseRepo: findById(courseId)\n    UseCase->>Student: enroll(courseId)\n    UseCase->>StudentRepo: save(student)\n    UseCase--\x3e>Controller: success\n    Controller--\x3e>UI: 201 Created"}),"\n",(0,t.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Martin, R. C. (2018). Clean Architecture: A Craftsman's Guide to Software Structure and Design. Pearson."}),"\n",(0,t.jsx)(n.li,{children:"Evans, E. (2003). Domain-Driven Design: Tackling Complexity in the Heart of Software. Addison-Wesley."}),"\n",(0,t.jsx)(n.li,{children:"Khononov, V. (2021). Learning Domain-Driven Design. O'Reilly."}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://angular.io/guide/architecture",children:"Angular Team. (2024). Architecture Overview."})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.nestjs.com",children:"NestJS Docs. (2024). Providers & Modules."})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(6540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},9365:(e,n,s)=>{s.d(n,{A:()=>i});s(6540);var r=s(4164);const t={tabItem:"tabItem_Ymn6"};var o=s(4848);function i({children:e,hidden:n,className:s}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,s),hidden:n,children:e})}}}]);