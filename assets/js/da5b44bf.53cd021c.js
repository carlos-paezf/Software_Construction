"use strict";(self.webpackChunksoftware_construction=self.webpackChunksoftware_construction||[]).push([[9639],{7223:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"modern_software_architecture_and_design/clean_architecture_principles","title":"Principios de Clean Architecture","description":"","source":"@site/docs/02_modern_software_architecture_and_design/03_clean_architecture_principles.md","sourceDirName":"02_modern_software_architecture_and_design","slug":"/modern_software_architecture_and_design/clean_architecture_principles","permalink":"/Software_Construction/docs/modern_software_architecture_and_design/clean_architecture_principles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_modern_software_architecture_and_design/03_clean_architecture_principles.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Estilos arquitect\xf3nicos comunes (Monol\xedtica, SOA, Microservicios)","permalink":"/Software_Construction/docs/modern_software_architecture_and_design/common_architectural_styles_monolithic_soa_microservices"},"next":{"title":"Capas y dependencias en Clean Architecture","permalink":"/Software_Construction/docs/modern_software_architecture_and_design/layers_and_dependencies_in_clean_architecture"}}');var c=r(4848),i=r(8453);const o={sidebar_position:3},s="Principios de Clean Architecture",a={},d=[];function _(e){const t={h1:"h1",header:"header",...(0,i.R)(),...e.components};return(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"principios-de-clean-architecture",children:"Principios de Clean Architecture"})})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(_,{...e})}):_(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>s});var n=r(6540);const c={},i=n.createContext(c);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);