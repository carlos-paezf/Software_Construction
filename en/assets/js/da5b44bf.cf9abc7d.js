"use strict";(self.webpackChunksoftware_construction=self.webpackChunksoftware_construction||[]).push([[9639],{1470:(e,t,n)=>{n.d(t,{A:()=>v});var s=n(6540),r=n(4164),a=n(3104),i=n(6347),o=n(205),d=n(7485),c=n(1682),l=n(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:n,default:s}})=>({value:e,label:t,attributes:n,default:s}))}(n);return function(e){const t=(0,c.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function m({value:e,tabValues:t}){return t.some(t=>t.value===e)}function h({queryString:e=!1,groupId:t}){const n=(0,i.W6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,d.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})},[r,n])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=p(e),[i,d]=(0,s.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:a})),[c,u]=h({queryString:n,groupId:r}),[x,g]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,l.Dv)(t);return[n,(0,s.useCallback)(e=>{t&&r.set(e)},[t,r])]}({groupId:r}),j=(()=>{const e=c??x;return m({value:e,tabValues:a})?e:null})();(0,o.A)(()=>{j&&d(j)},[j]);return{selectedValue:i,selectValue:(0,s.useCallback)(e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),g(e)},[u,g,a]),tabValues:a}}var g=n(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(4848);function S({className:e,block:t,selectedValue:n,selectValue:s,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const t=e.currentTarget,r=o.indexOf(t),a=i[r].value;a!==n&&(d(t),s(a))},l=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:i.map(({value:e,label:t,attributes:s})=>(0,f.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{o.push(e)},onKeyDown:l,onClick:c,...s,className:(0,r.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function y({lazy:e,children:t,selectedValue:n}){const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===n);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function b(e){const t=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,f.jsx)(S,{...t,...e}),(0,f.jsx)(y,{...t,...e})]})}function v(e){const t=(0,g.A)();return(0,f.jsx)(b,{...e,children:u(e.children)},String(t))}},7223:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"modern_software_architecture_and_design/clean_architecture_principles","title":"Principios de Clean Architecture","description":"Clean Architecture (Arquitectura Limpia) es un estilo arquitect\xf3nico propuesto por Robert C. Martin (\\"Uncle Bob\\"), que busca separar de forma estricta la l\xf3gica de negocio (n\xfacleo) de los detalles de implementaci\xf3n como frameworks, bases de datos, controladores, interfaces o UI. El objetivo es crear software independiente, mantenible, testable y adaptable, sin depender de frameworks, bases de datos o dispositivos externos.","source":"@site/docs/02_modern_software_architecture_and_design/03_clean_architecture_principles.md","sourceDirName":"02_modern_software_architecture_and_design","slug":"/modern_software_architecture_and_design/clean_architecture_principles","permalink":"/Software_Construction/en/docs/modern_software_architecture_and_design/clean_architecture_principles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_modern_software_architecture_and_design/03_clean_architecture_principles.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Estilos arquitect\xf3nicos comunes (Monol\xedtica, SOA, Microservicios)","permalink":"/Software_Construction/en/docs/modern_software_architecture_and_design/common_architectural_styles_monolithic_soa_microservices"},"next":{"title":"Capas y dependencias en Clean Architecture","permalink":"/Software_Construction/en/docs/modern_software_architecture_and_design/layers_and_dependencies_in_clean_architecture"}}');var r=n(4848),a=n(8453),i=n(1470),o=n(9365);const d={sidebar_position:3},c="Principios de Clean Architecture",l={},u=[{value:"Capas de Clean Architecture",id:"capas-de-clean-architecture",level:2},{value:"Principio de dependencia (Dependency Rule)",id:"principio-de-dependencia-dependency-rule",level:2},{value:"Ejemplo de uso NestJS",id:"ejemplo-de-uso-nestjs",level:2},{value:"Ejemplo de uso Angular v17+",id:"ejemplo-de-uso-angular-v17",level:2},{value:"Diagrama de secuencias",id:"diagrama-de-secuencias",level:2},{value:"Buenas pr\xe1cticas",id:"buenas-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"principios-de-clean-architecture",children:"Principios de Clean Architecture"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Clean Architecture"})," (Arquitectura Limpia) es un estilo arquitect\xf3nico propuesto por ",(0,r.jsx)(t.strong,{children:"Robert C. Martin"}),' ("Uncle Bob"), que busca separar de forma estricta la l\xf3gica de negocio (n\xfacleo) de los detalles de implementaci\xf3n como frameworks, bases de datos, controladores, interfaces o UI. El objetivo es crear software ',(0,r.jsx)(t.strong,{children:"independiente, mantenible, testable y adaptable"}),", sin depender de frameworks, bases de datos o dispositivos externos."]}),"\n",(0,r.jsx)(t.h2,{id:"capas-de-clean-architecture",children:"Capas de Clean Architecture"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Capa"}),(0,r.jsx)(t.th,{children:"Prop\xf3sito principal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Entities (Dominio)"})}),(0,r.jsx)(t.td,{children:"Contiene reglas de negocio centrales, independientes del sistema."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Use Cases (Aplicaci\xf3n)"})}),(0,r.jsx)(t.td,{children:"Orquesta entidades para cumplir reglas espec\xedficas de negocio."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Interface Adapters"})}),(0,r.jsx)(t.td,{children:"Convierte datos entre formatos externos y el modelo interno."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Frameworks & Drivers"})}),(0,r.jsx)(t.td,{children:"Bases de datos, frameworks (Angular/NestJS), UI, herramientas externas."})]})]})]}),"\n",(0,r.jsx)(t.mermaid,{value:"graph TD\n    UI[Angular UI] --\x3e CONT[Controller Interfaces]\n    CONT --\x3e USECASE[Use Case Application]\n    USECASE --\x3e ENTITY[Entidad Domain]\n    USECASE --\x3e REPO_PORT[Repo Interface Domain]\n    ADAPTER[Repositorio con DB Infra] --\x3e REPO_PORT\n    ADAPTER --\x3e DB[Database]"}),"\n",(0,r.jsx)(t.h2,{id:"principio-de-dependencia-dependency-rule",children:"Principio de dependencia (Dependency Rule)"}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:'"El c\xf3digo de capas externas puede depender de capas internas, pero nunca al rev\xe9s."'})})})}),"\n",(0,r.jsx)(t.p,{children:"Esto significa que:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Entidades ",(0,r.jsx)(t.strong,{children:"no conocen"})," nada de controladores o base de datos."]}),"\n",(0,r.jsxs)(t.li,{children:["Casos de uso ",(0,r.jsx)(t.strong,{children:"usan interfaces (puertos)"})," para acceder a repositorios o servicios externos."]}),"\n",(0,r.jsxs)(t.li,{children:["La direcci\xf3n de las dependencias siempre apunta ",(0,r.jsx)(t.strong,{children:"hacia el dominio"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"ejemplo-de-uso-nestjs",children:"Ejemplo de uso NestJS"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"src/\n\u251c\u2500\u2500 domain/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u2514\u2500\u2500 student.entity.ts\n\u2502   \u2514\u2500\u2500 repositories/\n\u2502       \u2514\u2500\u2500 student.repository.ts\n\u2502\n\u251c\u2500\u2500 application/\n\u2502   \u251c\u2500\u2500 use-cases/\n\u2502   \u2502   \u251c\u2500\u2500 create-student.usecase.ts\n\u2502   \u2502   \u2514\u2500\u2500 list-students.usecase.ts\n\u2502   \u2514\u2500\u2500 services.module.ts\n\u2502\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 persistence/\n\u2502       \u2514\u2500\u2500 in-memory-student.repository.ts\n\u2502\n\u251c\u2500\u2500 interfaces/\n\u2502   \u2514\u2500\u2500 rest/\n\u2502       \u2514\u2500\u2500 student.controller.ts\n\u2502\n\u2514\u2500\u2500 main.ts\n"})}),"\n",(0,r.jsx)(t.mermaid,{value:"classDiagram\n    class Student {\n        +string id\n        +string name\n        +string email\n    }\n\n    class StudentRepository {\n        <<interface>>\n        +save(student: Student): Promise<void>\n        +findAll(): Promise<Student[]>\n    }\n\n    class InMemoryStudentRepository {\n        -students: Student[]\n        +save(student: Student): Promise<void>\n        +findAll(): Promise<Student[]>\n    }\n\n    class CreateStudentUseCase {\n        -repository: StudentRepository\n        +execute(name: string, email: string): Promise<Student>\n    }\n\n    class ListStudentsUseCase {\n        -repository: StudentRepository\n        +execute(): Promise<Student[]>\n    }\n\n    class StudentController {\n        +create(dto): Promise<Student>\n        +getAll(): Promise<Student[]>\n    }\n\n    StudentRepository <|.. InMemoryStudentRepository\n    CreateStudentUseCase --\x3e StudentRepository\n    ListStudentsUseCase --\x3e StudentRepository\n    CreateStudentUseCase --\x3e Student\n    StudentController --\x3e CreateStudentUseCase\n    StudentController --\x3e ListStudentsUseCase"}),"\n","\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(o.A,{value:"entidad",label:"Domain",children:[(0,r.jsxs)(t.p,{children:["Esta capa contiene ",(0,r.jsx)(t.strong,{children:"el coraz\xf3n de la aplicaci\xf3n"}),", es decir, las reglas y estructuras fundamentales del negocio. ",(0,r.jsx)(t.strong,{children:"No depende de ning\xfan framework ni librer\xeda externa"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="domain/entities/student.entity.ts" showLineNumbers',children:"export class Student {\n  constructor(\n    public readonly id: string,\n    public name: string,\n    public email: string\n  ) {}\n}\n"})}),(0,r.jsxs)(t.p,{children:["La entidad ",(0,r.jsx)(t.code,{children:"Student"})," se encarga de representar a un estudiante con sus datos esenciales (",(0,r.jsx)(t.code,{children:"id"}),", ",(0,r.jsx)(t.code,{children:"name"}),", ",(0,r.jsx)(t.code,{children:"email"}),'), adem\xe1s, define el modelo de negocio: lo que significa ser un "estudiantes". Esta entidad es utilizada por los ',(0,r.jsx)(t.strong,{children:"casos de uso"})," para crear y manipular estudiantes, y es persistida por los ",(0,r.jsx)(t.strong,{children:"repositorios"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="domain/repositories/student.repository.ts" showLineNumbers',children:"import { Student } from '../entities/student.entity';\n\nexport interface StudentRepository {\n  save(student: Student): Promise<void>;\n  findAll(): Promise<Student[]>;\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"StudentRepository"})," es una interfaz que define ",(0,r.jsx)(t.strong,{children:"lo que debe hacer un repositorio"})," de estudiantes, sin decir c\xf3mo. Funciona como un contrato (puerto) para persistencia, el cual es usado por los casos de uso, e implementado por la capa de infraestructura."]})]}),(0,r.jsxs)(o.A,{value:"use-case",label:"Application",children:[(0,r.jsxs)(t.p,{children:["Aqu\xed definimos la ",(0,r.jsx)(t.strong,{children:"l\xf3gica espec\xedfica"})," que permite ejecutar acciones concretas en el sistema: ",(0,r.jsx)(t.strong,{children:"los casos de uso"}),". Esta capa orquesta el dominio, pero no conoce controladores ni bases de datos."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="application/use-cases/create-student.usecase.ts" showLineNumbers',children:"import { StudentRepository } from '../../domain/repositories/student.repository';\nimport { Student } from '../../domain/entities/student.entity';\nimport { v4 as uuid } from 'uuid';\n\nexport class CreateStudentUseCase {\n  constructor(private readonly repository: StudentRepository) {}\n\n  async execute(name: string, email: string): Promise<Student> {\n    const student = new Student(uuid(), name, email);\n    await this.repository.save(student);\n    return student;\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"CreateStudentUseCase"})," es quien recibe los datos del estudiante, crea una nueva instancia de ",(0,r.jsx)(t.code,{children:"Student"}),", y usa el repositorio para guardarlo. Esta clase es llamada desde el controlador (interfaces) para responder a peticiones ",(0,r.jsx)(t.code,{children:"POST"}),", y adicional usa el ",(0,r.jsx)(t.strong,{children:"repositorio"})," como interfaz pero sin conocer la implementaci\xf3n."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="application/use-cases/list-students.usecase.ts" showLineNumbers',children:"import { StudentRepository } from '../../domain/repositories/student.repository';\nimport { Student } from '../../domain/entities/student.entity';\n\nexport class ListStudentsUseCase {\n  constructor(private readonly repository: StudentRepository) {}\n\n  async execute(): Promise<Student[]> {\n    return this.repository.findAll();\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:["La clase ",(0,r.jsx)(t.code,{children:"ListStudentsUseCase"})," recupera todos los estudiantes registrados. Es usado por el controlador para responder peticiones ",(0,r.jsx)(t.code,{children:"GET"}),", a su vez, usa el repositorio y devuelve entidades del dominio."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="application/services.module.ts" showLineNumbers',children:"import { Module } from '@nestjs/common';\nimport { InMemoryStudentRepository } from '../infrastructure/persistence/in-memory-student.repository';\nimport { CreateStudentUseCase } from './use-cases/create-student.usecase';\nimport { ListStudentsUseCase } from './use-cases/list-students.usecase';\n\n@Module({\n  providers: [\n    {\n      provide: 'StudentRepository',\n      useClass: InMemoryStudentRepository,\n    },\n    {\n      provide: CreateStudentUseCase,\n      useFactory: (repo) => new CreateStudentUseCase(repo),\n      inject: ['StudentRepository'],\n    },\n    {\n      provide: ListStudentsUseCase,\n      useFactory: (repo) => new ListStudentsUseCase(repo),\n      inject: ['StudentRepository'],\n    },\n  ],\n  exports: [CreateStudentUseCase, ListStudentsUseCase],\n})\nexport class ServicesModule {}\n"})}),(0,r.jsxs)(t.p,{children:["Dentro del m\xf3dulo ",(0,r.jsx)(t.code,{children:"ServiceModule"}),", se registra todas las dependencias necesarias para que NestJS inyecte correctamente los objetos:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Se registra que ",(0,r.jsx)(t.code,{children:"StudentRepository"})," se implementa con ",(0,r.jsx)(t.code,{children:"InMemoryStudentRepository"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Se crea manualmente cada ",(0,r.jsx)(t.code,{children:"UseCase"}),", inyect\xe1ndole el repositorio adecuado."]}),"\n"]}),(0,r.jsx)(t.p,{children:"Esto permite que los casos de uso est\xe9n completamente desacoplados de la infraestructura y puedan ser f\xe1cilmente probados o modificados."})]}),(0,r.jsxs)(o.A,{value:"adapter",label:"Infrastructure",children:[(0,r.jsxs)(t.p,{children:["Esta capa contiene la ",(0,r.jsx)(t.strong,{children:"implementaci\xf3n concreta"})," de los puertos definidos en el dominio. Aqu\xed vive el c\xf3digo que ",(0,r.jsx)(t.strong,{children:"interact\xfaa con tecnolog\xedas externas:"})," bases de datos, APIs, archivos, etc."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="infrastructure/persistence/in-memory-student.repository.ts" showLineNumbers',children:"import { Injectable } from '@nestjs/common';\nimport { Student } from '../../domain/entities/student.entity';\nimport { StudentRepository } from '../../domain/repositories/student.repository';\n\n@Injectable()\nexport class InMemoryStudentRepository implements StudentRepository {\n  private readonly students: Student[] = [];\n\n  async save(student: Student): Promise<void> {\n    this.students.push(student);\n  }\n\n  async findAll(): Promise<Student[]> {\n    return this.students;\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:["En este ejemplo, ",(0,r.jsx)(t.code,{children:"InMemoryStudentRepository"})," se encarga de guardar estudiantes en un arreglo local, es decir, en memoria. Tambi\xe9n, simula una base de datos para pruebas o prototipos. Esta clase implemente la interfaz ",(0,r.jsx)(t.code,{children:"StudentRepository"}),", y es inyectada por NestJS como dependencia de los casos de uso."]})]}),(0,r.jsxs)(o.A,{value:"controlador",label:"Interfaces",children:[(0,r.jsxs)(t.p,{children:["Esta es la capa m\xe1s externa. Aqu\xed conectamos al usuario (frontend, HTTP, etc.) con el resto del sistema. En este caso, usamos ",(0,r.jsx)(t.strong,{children:"NestJS"})," como framework para servir endpoints REST."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="interfaces/rest/student.controller.ts" showLineNumbers',children:"import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { CreateStudentUseCase } from '../../application/use-cases/create-student.usecase';\nimport { ListStudentsUseCase } from '../../application/use-cases/list-students.usecase';\n\n@Controller('students')\nexport class StudentController {\n  constructor(\n    private readonly createUseCase: CreateStudentUseCase,\n    private readonly listUseCase: ListStudentsUseCase\n  ) {}\n\n  @Post()\n  async create(@Body() dto: { name: string; email: string }) {\n    return this.createUseCase.execute(dto.name, dto.email);\n  }\n\n  @Get()\n  async getAll() {\n    return this.listUseCase.execute();\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:["El controlador ",(0,r.jsx)(t.code,{children:"StudentController"})," expone 2 endpoints HTTP:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"POST /students"})," para crear un estudiante"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"GET /students"})," para listar estudiantes."]}),"\n"]}),(0,r.jsxs)(t.p,{children:["Adem\xe1s, recibe los datos del cliente, se los pasa al caso de uso y devuelve una respuesta. Este controlador ",(0,r.jsx)(t.strong,{children:"llama a los casos de uso"}),", pero no conoce ni manipula la l\xf3gica interna ni la base de datos directamente."]})]}),(0,r.jsxs)(o.A,{value:"main",label:"Main",children:[(0,r.jsxs)(t.p,{children:["El archivo ",(0,r.jsx)(t.code,{children:"main.ts"})," es el punto de entrada principal de la aplicaci\xf3n, es el ",(0,r.jsx)(t.strong,{children:"bootstrap"})," de la aplicaci\xf3n NestJS. Es el lugar donde se crea y se inicia la aplicaci\xf3n. Es an\xe1logo al ",(0,r.jsx)(t.code,{children:"main()"})," de otros lenguajes."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="main.ts" showLineNumbers',children:"import { NestFactory } from '@nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { ServicesModule } from './application/services.module';\nimport { StudentController } from './interfaces/rest/student.controller';\n\n@Module({\n  imports: [ServicesModule],\n  controllers: [StudentController],\n})\nexport class AppModule {}\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n"})}),(0,r.jsxs)(t.p,{children:["Aunque ",(0,r.jsx)(t.code,{children:"main.ts"})," est\xe1 fuera de las capas centrales, ",(0,r.jsx)(t.strong,{children:"conecta la infraestructura (NestJS) con las interfaces y casos de uso"}),". Es el lugar donde:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Se arranca la app"}),"\n",(0,r.jsx)(t.li,{children:"Se configuran globales (Validaci\xf3n, CORS, etc.)"}),"\n",(0,r.jsx)(t.li,{children:"Se integran m\xf3dulos construidos seg\xfan Clean Architecture"}),"\n"]})]})]}),"\n",(0,r.jsx)(t.mermaid,{value:"graph TD\n  UI[REST Controller] --\x3e CU[CreateStudentUseCase]\n  UI --\x3e LU[ListStudentsUseCase]\n  CU --\x3e E[Student Entity]\n  LU --\x3e E\n  CU --\x3e R1[StudentRepository - Port]\n  LU --\x3e R1\n  R2[InMemoryStudentRepository] --\x3e R1\n  R2 --\x3e DB[Memory DB]"}),"\n",(0,r.jsx)(t.h2,{id:"ejemplo-de-uso-angular-v17",children:"Ejemplo de uso Angular v17+"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"src/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 domain/\n\u2502   \u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 student.model.ts\n\u2502   \u2502   \u2514\u2500\u2500 repositories/\n\u2502   \u2502       \u2514\u2500\u2500 student.repository.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 application/\n\u2502   \u2502   \u2514\u2500\u2500 use-cases/\n\u2502   \u2502       \u251c\u2500\u2500 add-student.usecase.ts\n\u2502   \u2502       \u2514\u2500\u2500 get-students.usecase.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 infrastructure/\n\u2502   \u2502   \u2514\u2500\u2500 http/\n\u2502   \u2502       \u251c\u2500\u2500 student-http.service.ts\n\u2502   \u2502       \u2514\u2500\u2500 student.dto.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 presentation/\n\u2502   \u2502   \u2514\u2500\u2500 pages/\n\u2502   \u2502       \u2514\u2500\u2500 student-page/\n\u2502   \u2502           \u251c\u2500\u2500 student-page.component.ts\n\u2502   \u2502           \u2514\u2500\u2500 student-page.component.html\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 app.config.ts\n"})}),"\n",(0,r.jsx)(t.mermaid,{value:"classDiagram\n    class Student {\n        +string id\n        +string name\n        +string email\n    }\n\n    class StudentRepository {\n        <<abstract>>\n        +getAll(): Promise<Student[]>\n        +create(name: string, email: string): Promise<Student>\n    }\n\n    class StudentHttpService {\n        +getAll(): Promise<Student[]>\n        +create(name: string, email: string): Promise<Student>\n    }\n\n    class ListStudentsUseCase {\n        -repo: StudentRepository\n        +execute(): Promise<Student[]>\n    }\n\n    class CreateStudentUseCase {\n        -repo: StudentRepository\n        +execute(name: string, email: string): Promise<Student>\n    }\n\n    class StudentPageComponent {\n        -students: Signal<Student[]>\n        -name: string\n        -email: string\n        +refresh(): void\n        +register(): void\n    }\n\n    StudentRepository <|-- StudentHttpService\n    CreateStudentUseCase --\x3e StudentRepository\n    ListStudentsUseCase --\x3e StudentRepository\n    StudentPageComponent --\x3e CreateStudentUseCase\n    StudentPageComponent --\x3e ListStudentsUseCase"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(o.A,{value:"entidad",label:"Domain",children:[(0,r.jsxs)(t.p,{children:["Esta capa define ",(0,r.jsx)(t.strong,{children:"qu\xe9 es el sistema"}),", pero no c\xf3mo funciona t\xe9cnicamente. No depende de Angular ni HTTP."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/domain/models/student.model.ts" showLineNumbers',children:"export interface Student {\n  id: string;\n  name: string;\n  email: string;\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Student"})," define la entidad estudiante. Es el tipo de dato que circula por todas las capas (modelo del negocio)."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/domain/repositories/student.repository.ts" showLineNumbers',children:"import { Student } from '../models/student.model';\n\nexport abstract class StudentRepository {\n  abstract getAll(): Promise<Student[]>;\n  abstract create(name: string, email: string): Promise<Student>;\n}\n"})}),(0,r.jsxs)(t.p,{children:["Por otro lado, ",(0,r.jsx)(t.code,{children:"student.repository.ts"})," define un contrato abstracto (interfaz) para acceder a datos de estudiantes. No indica ",(0,r.jsx)(t.strong,{children:"c\xf3mo"})," se conectar\xe1 al backend (eso lo resuelve la infraestructura). El contrato es usado por los casos de uso, y es implementada por la infraestructura."]})]}),(0,r.jsxs)(o.A,{value:"app",label:"Application",children:[(0,r.jsxs)(t.p,{children:["Aqu\xed se encuentra la l\xf3gica que representa lo que el sistema puede hacer: ",(0,r.jsx)(t.strong,{children:"acciones espec\xedficas"})," como crear o listar estudiantes."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/application/use-cases/list-students.usecase.ts" showLineNumbers',children:"import { inject } from '@angular/core';\nimport { StudentRepository } from '../../domain/repositories/student.repository';\n\nexport class ListStudentsUseCase {\n  private repo = inject(StudentRepository);\n\n  execute() {\n    return this.repo.getAll();\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"ListStudentUseCase"})," recupera la lista de estudiantes, y llama al repositorio abstracto. Esta clase depende solo de ",(0,r.jsx)(t.code,{children:"StudentRepository"}),", no de Angular, no de HTTP."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/application/use-cases/create-student.usecase.ts" showLineNumbers',children:"import { inject } from '@angular/core';\nimport { StudentRepository } from '../../domain/repositories/student.repository';\n\nexport class CreateStudentUseCase {\n  private repo = inject(StudentRepository);\n\n  execute(name: string, email: string) {\n    return this.repo.create(name, email);\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"CreateStudentUseCase"})," ejecuta la acci\xf3n de registrar un nuevo estudiante, recibe datos y delega la persistencia al repositorio. Ambas clases son usadas directamente por el componente ",(0,r.jsx)(t.code,{children:"StudentPageComponent"})]})]}),(0,r.jsxs)(o.A,{value:"infra",label:"Infrastructure",children:[(0,r.jsxs)(t.p,{children:["Aqu\xed se encuentra el c\xf3digo que ",(0,r.jsx)(t.strong,{children:"implementa t\xe9cnicamente"})," c\xf3mo se conectan los casos de uso con servicios externos, como APIs HTTP."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/infrastructure/http/student.dto.ts" showLineNumbers',children:"export interface CreateStudentDto {\n  name: string;\n  email: string;\n}\n"})}),(0,r.jsx)(t.p,{children:"Un DTO (Data Transfer Object), define la estructura del cuerpo esperado por el backend al registrar un estudiante."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/infrastructure/http/student-http.service.ts" showLineNumbers',children:"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Student } from '../../domain/models/student.model';\nimport { StudentRepository } from '../../domain/repositories/student.repository';\nimport { CreateStudentDto } from './student.dto';\n\n@Injectable({ providedIn: 'root' })\nexport class StudentHttpService extends StudentRepository {\n  private readonly url = 'http://localhost:3000/students';\n\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  getAll(): Promise<Student[]> {\n    return this.http.get<Student[]>(this.url).toPromise();\n  }\n\n  create(name: string, email: string): Promise<Student> {\n    const dto: CreateStudentDto = { name, email };\n    return this.http.post<Student>(this.url, dto).toPromise();\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"StudentHttpService"})," implementa ",(0,r.jsx)(t.code,{children:"StudentRepository"})," usando ",(0,r.jsx)(t.code,{children:"HttpClient"})," y ejecuta llamadas HTTP a ",(0,r.jsx)(t.code,{children:"http://localhost:3000/students"}),". Esta clase es ",(0,r.jsx)(t.strong,{children:"registrada como implementaci\xf3n"})," del repositorio abstracto, adem\xe1s de ser inyectada por Angular en los casos de uso a trav\xe9s de ",(0,r.jsx)(t.code,{children:"app.config.ts"}),"."]})]}),(0,r.jsxs)(o.A,{value:"presentation",label:"Presentation",children:[(0,r.jsxs)(t.p,{children:["Aqu\xed radica la ",(0,r.jsx)(t.strong,{children:"interfaz visual"}),". Es lo que el usuario ve y con lo que interact\xfaa."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/presentation/pages/student-page/student-page.component.ts" showLineNumbers',children:"import { Component, inject, signal, OnInit } from '@angular/core';\nimport { Student } from '../../../domain/models/student.model';\nimport { CreateStudentUseCase } from '../../../application/use-cases/create-student.usecase';\nimport { ListStudentsUseCase } from '../../../application/use-cases/list-students.usecase';\n\n@Component({\n  selector: 'app-student-page',\n  standalone: true,\n  templateUrl: './student-page.component.html',\n})\nexport class StudentPageComponent implements OnInit {\n  students = signal<Student[]>([]);\n  name = '';\n  email = '';\n\n  private listUseCase = inject(ListStudentsUseCase);\n  private createUseCase = inject(CreateStudentUseCase);\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  async refresh() {\n    this.students.set(await this.listUseCase.execute());\n  }\n\n  async register() {\n    await this.createUseCase.execute(this.name, this.email);\n    this.name = '';\n    this.email = '';\n    await this.refresh();\n  }\n}\n"})}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"StudentPageComponent"})," muestra un formulario para registrar estudiantes, usa Signals para manejar el estado reactivo de la lista, y llama directamente a los casos de uso. Este componente orquesta la presentaci\xf3n y los casos de uso, no conoce el backend ni HttpClient directamente."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",metastring:'title="src/app/presentation/pages/student-page/student-page.component.html" showLineNumbers',children:'<h2>Registrar estudiante</h2>\n<input placeholder="Nombre" [(ngModel)]="name" />\n<input placeholder="Email" [(ngModel)]="email" />\n<button (click)="register()">Registrar</button>\n\n<h2>Lista de estudiantes</h2>\n<ul>\n  @for (student of students(); track student.id) {\n    <li>{{ student.name }} ({{ student.email }})</li>\n  } @empty {\n    <li>No items available</li>\n  }\n</ul>\n'})})]}),(0,r.jsxs)(o.A,{value:"provider",label:"Proveedor abstracto",children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"app.config.ts"})," le dice a Angular que siempre que se pida un ",(0,r.jsx)(t.code,{children:"StudentRepository"}),", use la clase ",(0,r.jsx)(t.code,{children:"StudentHttpService"}),". Es el pegamento que une el ",(0,r.jsx)(t.strong,{children:"dominio abstracto"})," con la ",(0,r.jsx)(t.strong,{children:"infraestructura concreta"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/app.config.ts" showLineNumbers',children:"import { ApplicationConfig, importProvidersFrom } from '@angular/core';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { StudentRepository } from './domain/repositories/student.repository';\nimport { StudentHttpService } from './infrastructure/http/student-http.service';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(),\n    {\n      provide: StudentRepository,\n      useClass: StudentHttpService,\n    },\n  ],\n};\n"})})]})]}),"\n",(0,r.jsx)(t.h2,{id:"diagrama-de-secuencias",children:"Diagrama de secuencias"}),"\n",(0,r.jsx)(t.mermaid,{value:"sequenceDiagram\n    participant UI as Usuario / UI (Componente)\n    participant Controller as Controlador (HTTP o Component)\n    participant UseCase as Caso de Uso (Application Layer)\n    participant RepoPort as StudentRepository (Dominio)\n    participant RepoImpl as StudentHttpService / DBAdapter (Infraestructura)\n\n    UI->>Controller: Env\xeda datos del formulario\n    Controller->>UseCase: Ejecuta caso de uso\n    UseCase->>RepoPort: Solicita guardar estudiante\n    RepoPort->>RepoImpl: Llama implementaci\xf3n concreta\n    RepoImpl--\x3e>RepoPort: Retorna resultado\n    RepoPort--\x3e>UseCase: Retorna entidad\n    UseCase--\x3e>Controller: Devuelve respuesta\n    Controller--\x3e>UI: Muestra confirmaci\xf3n"}),"\n",(0,r.jsx)(t.h2,{id:"buenas-pr\xe1cticas",children:"Buenas pr\xe1cticas"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Principio"}),(0,r.jsx)(t.th,{children:"Aplicaci\xf3n en Clean Architecture"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Separaci\xf3n de responsabilidades"})}),(0,r.jsx)(t.td,{children:"Cada capa tiene un rol bien definido"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Inversi\xf3n de dependencias"})}),(0,r.jsx)(t.td,{children:"Repositorios definidos como interfaces"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Independencia tecnol\xf3gica"})}),(0,r.jsx)(t.td,{children:"El dominio no depende de NestJS o Angular"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Reutilizaci\xf3n"})}),(0,r.jsx)(t.td,{children:"Casos de uso reutilizables desde REST o GraphQL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Testabilidad"})}),(0,r.jsx)(t.td,{children:"Casos de uso y entidades f\xe1cilmente testeables"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Martin, R. C. (2017). ",(0,r.jsx)(t.a,{href:"https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/",children:"Clean Architecture: A Craftsman's Guide to Software Structure and Design"}),". Pearson."]}),"\n",(0,r.jsxs)(t.li,{children:["Richards, M., & Ford, N. (2020). ",(0,r.jsx)(t.a,{href:"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/",children:"Fundamentals of Software Architecture"}),". O\u2019Reilly."]}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://docs.nestjs.com/",children:"NestJS Docs \u2013 Providers and Modules"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://angular.io/guide/architecture",children:"Angular Docs \u2013 Architecture Overview"})}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},9365:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var s=n(4164);const r={tabItem:"tabItem_Ymn6"};var a=n(4848);function i({children:e,hidden:t,className:n}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,n),hidden:t,children:e})}}}]);