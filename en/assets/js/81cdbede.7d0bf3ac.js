"use strict";(self.webpackChunksoftware_construction=self.webpackChunksoftware_construction||[]).push([[6033],{6637:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"modern_software_architecture_and_design/what_is_software_architecture","title":"\xbfQu\xe9 es arquitectura de software?","description":"La arquitectura de software es la estructura fundamental de un sistema de software, definida por sus componentes, relaciones y propiedades. Incluye tanto las decisiones estructurales como las no estructurales (rendimiento, escalabilidad, seguridad, etc.).","source":"@site/docs/02_modern_software_architecture_and_design/01_what_is_software_architecture.md","sourceDirName":"02_modern_software_architecture_and_design","slug":"/modern_software_architecture_and_design/what_is_software_architecture","permalink":"/Software_Construction/en/docs/modern_software_architecture_and_design/what_is_software_architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_modern_software_architecture_and_design/01_what_is_software_architecture.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Arquitectura y dise\xf1o de software moderno","permalink":"/Software_Construction/en/docs/category/arquitectura-y-dise\xf1o-de-software-moderno"},"next":{"title":"Estilos arquitect\xf3nicos comunes (Monol\xedtica, SOA, Microservicios)","permalink":"/Software_Construction/en/docs/modern_software_architecture_and_design/common_architectural_styles_monolithic_soa_microservices"}}');var i=n(4848),a=n(8453);const t={sidebar_position:1},c="\xbfQu\xe9 es arquitectura de software?",o={},d=[{value:"\xbfPor qu\xe9 es importante?",id:"por-qu\xe9-es-importante",level:2},{value:"Elementos clave de la arquitectura de software",id:"elementos-clave-de-la-arquitectura-de-software",level:2},{value:"Estilos arquitect\xf3nicos comunes",id:"estilos-arquitect\xf3nicos-comunes",level:2},{value:"Monol\xedtica",id:"monol\xedtica",level:3},{value:"Cliente-Servidor",id:"cliente-servidor",level:3},{value:"En Capas (Layered)",id:"en-capas-layered",level:3},{value:"Microservicios",id:"microservicios",level:3},{value:"Clean Architecture",id:"clean-architecture",level:3},{value:"Hexagonal (Ports &amp; Adapters)",id:"hexagonal-ports--adapters",level:3},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Aplicaciones pr\xe1cticas",id:"aplicaciones-pr\xe1cticas",level:2},{value:"Referencias",id:"referencias",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"qu\xe9-es-arquitectura-de-software",children:"\xbfQu\xe9 es arquitectura de software?"})}),"\n",(0,i.jsxs)(r.p,{children:["La ",(0,i.jsx)(r.strong,{children:"arquitectura de software"})," es la estructura fundamental de un sistema de software, definida por sus ",(0,i.jsx)(r.strong,{children:"componentes, relaciones y propiedades"}),". Incluye tanto las decisiones estructurales como las no estructurales (rendimiento, escalabilidad, seguridad, etc.)."]}),"\n",(0,i.jsx)(r.p,{children:"Es como el plano de un edificio: no especifica todos los detalles, pero define los pilares, entradas, salidas y distribuci\xf3n general."}),"\n",(0,i.jsx)(r.h2,{id:"por-qu\xe9-es-importante",children:"\xbfPor qu\xe9 es importante?"}),"\n",(0,i.jsx)(r.p,{children:"Una buena arquitectura permite que el software sea:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Escalable:"})," crecer sin romperse."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Mantenible:"})," f\xe1cil de modificar y entender."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Reutilizable:"})," m\xf3dulos independientes y adaptables."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Probable y confiable:"})," se pueden aislar y probar sus partes."]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.strong,{children:"Segura y eficiente."})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"elementos-clave-de-la-arquitectura-de-software",children:"Elementos clave de la arquitectura de software"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Elemento"}),(0,i.jsx)(r.th,{children:"Descripci\xf3n"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"M\xf3dulos o capas"})}),(0,i.jsx)(r.td,{children:"Partes independientes con funciones espec\xedficas (ej: UI, l\xf3gica, datos)."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Componentes"})}),(0,i.jsx)(r.td,{children:"Unidades funcionales reutilizables que interact\xfaan entre s\xed."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Conectores"})}),(0,i.jsx)(r.td,{children:"Relaciones o mecanismos de comunicaci\xf3n entre m\xf3dulos."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Decisiones arquitect\xf3nicas"})}),(0,i.jsx)(r.td,{children:"Patrones, lenguajes, frameworks, estilos seleccionados."})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"estilos-arquitect\xf3nicos-comunes",children:"Estilos arquitect\xf3nicos comunes"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Estilo"}),(0,i.jsx)(r.th,{children:"Caracter\xedsticas clave"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Monol\xedtico"})}),(0,i.jsx)(r.td,{children:"Todo en una sola unidad. Simple, pero poco flexible."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Cliente\u2013Servidor"})}),(0,i.jsx)(r.td,{children:"Separaci\xf3n entre UI y l\xf3gica/datos del servidor."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Capas (Layered)"})}),(0,i.jsx)(r.td,{children:"Separaci\xf3n en UI, l\xf3gica, servicios, datos. Muy usado."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Microservicios"})}),(0,i.jsx)(r.td,{children:"Componentes independientes comunicados por API."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Clean Architecture"})}),(0,i.jsx)(r.td,{children:"L\xf3gica de negocio separada de frameworks y delivery."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Hexagonal (Ports & Adapters)"})}),(0,i.jsx)(r.td,{children:"A\xedsla el n\xfacleo de cualquier infraestructura externa."})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"monol\xedtica",children:"Monol\xedtica"}),"\n",(0,i.jsx)(r.mermaid,{value:"architecture-beta\n    group monolith(server)[App Monolitica]\n\n    service ui(internet)[UI Angular] in monolith\n    service logic(server)[Logica de negocio] in monolith\n    service db(database)[Base de datos] in monolith\n\n    ui:B -- T:logic\n    logic:B -- T:db"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Caracter\xedsticas:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Todo el sistema en un solo bloque desplegable."}),"\n",(0,i.jsx)(r.li,{children:"F\xe1cil de desarrollar inicialmente, pero dif\xedcil de escalar o mantener en el tiempo."}),"\n",(0,i.jsx)(r.li,{children:"Usado en prototipos r\xe1pidos o MVPs sencillos."}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"cliente-servidor",children:"Cliente-Servidor"}),"\n",(0,i.jsx)(r.mermaid,{value:"architecture-beta\n    group frontend(cloud)[Cliente Web]\n    group backend(server)[Servidor NestJS]\n\n    service ui(internet)[Angular UI] in frontend\n    service api(cloud)[API REST] in backend\n    service logic(server)[Logica App] in backend\n    service db(database)[Base de datos] in backend\n\n    ui:B --\x3e T:api\n    api:B -- T:logic\n    logic:B -- T:db"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Caracter\xedsticas:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Separaci\xf3n clara entre frontend y backend."}),"\n",(0,i.jsx)(r.li,{children:"Modelo ideal para apps web tradicionales."}),"\n",(0,i.jsx)(r.li,{children:"Base de casi todas las arquitecturas modernas."}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"en-capas-layered",children:"En Capas (Layered)"}),"\n",(0,i.jsx)(r.mermaid,{value:"architecture-beta\n    group capa1(internet)[Capa de presentacion]\n    group capa2(server)[Capa de aplicacion]\n    group capa3(database)[Capa de dominio]\n    group capa4(database)[Capa de datos]\n\n    service angular(internet)[Angular] in capa1\n    service controller(server)[Controlador] in capa2\n    service services(server)[Servicio] in capa2\n    service entity(server)[Entidad] in capa3\n    service repository(database)[Repositorio] in capa4\n    service db(database)[DB] in capa4\n\n    angular:B --\x3e T:controller\n    controller:B --\x3e T:services\n    services:B -- T:entity\n    services:B -- T:repository\n    repository:B -- T:db"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Caracter\xedsticas:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Cada capa tiene una responsabilidad clara."}),"\n",(0,i.jsx)(r.li,{children:"Muy usado en contextos acad\xe9micos y empresariales."}),"\n",(0,i.jsx)(r.li,{children:"F\xe1cil de implementar en Angular (frontend) y NestJS (backend)."}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"microservicios",children:"Microservicios"}),"\n",(0,i.jsx)(r.mermaid,{value:"architecture-beta\n    group ms1(cloud)[Microservicio Usuarios]\n    group ms2(cloud)[Microservicio Cursos]\n    group ms3(cloud)[Microservicio Notificaciones]\n\n    service client(internet)[Cliente Web]\n\n    service userApi(server)[API Usuarios] in ms1\n    service userDb(database)[DB Usuarios] in ms1\n\n    service courseApi(server)[API Cursos] in ms2\n    service courseDb(database)[DB Cursos] in ms2\n\n    service notifApi(server)[API Notificaciones] in ms3\n    service notifDb(database)[DB Notif] in ms3\n\n    client:B --\x3e T:userApi\n    client:L --\x3e R:courseApi\n    client:R --\x3e L:notifApi\n\n    userApi:B --\x3e T:userDb\n    courseApi:B --\x3e T:courseDb\n    notifApi:B --\x3e T:notifDb"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Caracter\xedsticas:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Cada microservicio tiene su propia base de datos y se despliega por separado."}),"\n",(0,i.jsx)(r.li,{children:"Independencia tecnol\xf3gica y de equipos."}),"\n",(0,i.jsx)(r.li,{children:"Alta complejidad en la gesti\xf3n e infraestructura."}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"clean-architecture",children:"Clean Architecture"}),"\n",(0,i.jsx)(r.mermaid,{value:"architecture-beta\n    group delivery(cloud)[Interfaces Controllers]\n    group application(server)[Casos de uso]\n    group domain(disk)[Dominio puro]\n    group infra(database)[Infraestructura]\n\n    service angular(internet)[Angular UI] in delivery\n    service controller(server)[NestJS Controller] in delivery\n    service usecase(server)[Use Case] in application\n    service entity(disk)[Entidad] in domain\n    service repoPort(disk)[Repo puerto] in domain\n    service repoImpl(server)[Repo implementacion] in infra\n    service db(database)[Base de datos] in infra\n\n    angular:B --\x3e T:controller\n    controller:B --\x3e T:usecase\n    usecase:B --\x3e T:entity\n    usecase:B --\x3e T:repoPort\n    repoImpl:B --\x3e T:db\n    repoImpl:L -- R:repoPort"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Caracter\xedsticas:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"El dominio no depende de frameworks externos."}),"\n",(0,i.jsx)(r.li,{children:"Alta mantenibilidad y testabilidad."}),"\n",(0,i.jsx)(r.li,{children:"Ideal para proyectos grandes y educativos que requieren buenas pr\xe1cticas."}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"hexagonal-ports--adapters",children:"Hexagonal (Ports & Adapters)"}),"\n",(0,i.jsx)(r.mermaid,{value:"architecture-beta\n    group domain(server)[Core Dominio]\n    group input(cloud)[Adapters de Entrada]\n    group output(database)[Adapters de Salida]\n\n    service logic(server)[Logica Central] in domain\n    service portIn(server)[Puerto Entrada] in domain\n    service portOut(server)[Puerto Salida] in domain\n\n    service controller(server)[REST Controller] in input\n    service ui(internet)[Angular UI] in input\n\n    service dbAdapter(server)[DB Adapter] in output\n    service mailer(server)[Email Adapter] in output\n    service db(database)[Base de Datos] in output\n\n    ui:B --\x3e T:controller\n    controller:R --\x3e L:portIn\n    portIn:B --\x3e T:logic\n    logic:B --\x3e T:portOut\n    portOut:R --\x3e L:dbAdapter\n    dbAdapter:B --\x3e T:db\n    portOut:R --\x3e L:mailer\n"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Caracter\xedsticas:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Core aislado de toda tecnolog\xeda externa."}),"\n",(0,i.jsx)(r.li,{children:"Las dependencias apuntan hacia el dominio."}),"\n",(0,i.jsx)(r.li,{children:"Muy utilizada en sistemas donde hay m\xfaltiples interfaces (web, m\xf3vil, APIs externas)."}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n",(0,i.jsx)(r.p,{children:"Supongamos una aplicaci\xf3n para registrar asistencia a clases. Podr\xedamos dise\xf1arla con Clean Architecture:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-txt",children:"frontend/ (Angular)\n  \u2514\u2500\u2500 app/\n      \u251c\u2500\u2500 core/           \u2192 l\xf3gica de negocio\n      \u251c\u2500\u2500 features/       \u2192 m\xf3dulos funcionales (asistencia, usuarios)\n      \u2514\u2500\u2500 shared/         \u2192 componentes reutilizables\n\nbackend/ (NestJS)\n  \u2514\u2500\u2500 src/\n      \u251c\u2500\u2500 domain/         \u2192 entidades y reglas\n      \u251c\u2500\u2500 application/    \u2192 casos de uso (services)\n      \u251c\u2500\u2500 infrastructure/ \u2192 controladores y persistencia\n      \u2514\u2500\u2500 interfaces/     \u2192 adaptadores de entrada y salida\n"})}),"\n",(0,i.jsxs)(r.p,{children:["En esta arquitectura se separa el ",(0,i.jsx)(r.strong,{children:"dominio puro"})," de la ",(0,i.jsx)(r.strong,{children:"infraestructura"}),", por ejemplo al momento de crear un caso de uso en el backend:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",metastring:'title="src/application/use-cases/register-attendance.use-case.ts" showLineNumbers',children:"@Injectable()\nexport class RegisterAttendanceUseCase {\n  constructor(private readonly repository: AttendanceRepository) {}\n\n  async execute(dto: RegisterAttendanceDto): Promise<void> {\n    const record = new Attendance(dto.userId, dto.date);\n    await this.repository.save(record);\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"aplicaciones-pr\xe1cticas",children:"Aplicaciones pr\xe1cticas"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Contexto"}),(0,i.jsx)(r.th,{children:"Aplicaci\xf3n de arquitectura de software"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Educaci\xf3n"}),(0,i.jsx)(r.td,{children:"Proyectos estudiantiles organizados por capas"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Startups"}),(0,i.jsx)(r.td,{children:"Microservicios para escalar m\xf3dulos independientes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Backend gubernamental"}),(0,i.jsx)(r.td,{children:"Arquitectura hexagonal para integrar sistemas externos"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Apps m\xf3viles y web"}),(0,i.jsx)(r.td,{children:"Clean Architecture para compartir l\xf3gica entre front y back"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"referencias",children:"Referencias"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Bass, L., Clements, P., & Kazman, R. (2012). ",(0,i.jsx)(r.a,{href:"https://www.informit.com/store/software-architecture-in-practice-9780321815736",children:"Software Architecture in Practice (3rd ed.)"}),". Addison-Wesley."]}),"\n",(0,i.jsxs)(r.li,{children:["Martin, R. C. (2017). ",(0,i.jsx)(r.a,{href:"https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/",children:"Clean Architecture: A Craftsman's Guide to Software Structure and Design"}),". Pearson."]}),"\n",(0,i.jsxs)(r.li,{children:["Richards, M., & Ford, N. (2020). ",(0,i.jsx)(r.a,{href:"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/",children:"Fundamentals of Software Architecture"}),". O\u2019Reilly."]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://angular.io/guide/architecture",children:"Angular Docs"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://docs.nestjs.com/",children:"NestJS Docs"})}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>c});var s=n(6540);const i={},a=s.createContext(i);function t(e){const r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);