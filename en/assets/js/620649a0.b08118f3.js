"use strict";(self.webpackChunksoftware_construction=self.webpackChunksoftware_construction||[]).push([[2451],{388:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"angular_from_scratch/typescript_for_angular_types_interfaces_classes","title":"TypeScript para Angular: tipos, interfaces, clases","description":"Angular est\xe1 construido sobre TypeScript, un superconjunto tipado de JavaScript que permite detectar errores antes de ejecutar el c\xf3digo, definir estructuras formales de datos, y aplicar principios de programaci\xf3n orientada a objetos (OOP) y funcional.","source":"@site/docs/03_angular_from_scratch/04_typescript_for_angular_types_interfaces_classes.md","sourceDirName":"03_angular_from_scratch","slug":"/angular_from_scratch/typescript_for_angular_types_interfaces_classes","permalink":"/Software_Construction/en/docs/angular_from_scratch/typescript_for_angular_types_interfaces_classes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03_angular_from_scratch/04_typescript_for_angular_types_interfaces_classes.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Estructura de un proyecto Angular","permalink":"/Software_Construction/en/docs/angular_from_scratch/structure_of_an_angular_project"},"next":{"title":"Comando \xfatiles de Angular CLI","permalink":"/Software_Construction/en/docs/angular_from_scratch/useful_angular_cli_commands"}}');var i=s(4848),t=s(8453);const a={sidebar_position:4},c="TypeScript para Angular: tipos, interfaces, clases",l={},o=[{value:"\xbfPor qu\xe9 TypeScript en Angular?",id:"por-qu\xe9-typescript-en-angular",level:2},{value:"Tipos en TypeScript",id:"tipos-en-typescript",level:2},{value:"Ejemplo de tipos primitivos",id:"ejemplo-de-tipos-primitivos",level:3},{value:"Ejemplo de tipos compuestos",id:"ejemplo-de-tipos-compuestos",level:3},{value:"Ejemplo de tipos personalizados",id:"ejemplo-de-tipos-personalizados",level:3},{value:"Interfaces en TypeScript",id:"interfaces-en-typescript",level:2},{value:"Clases en TypeScript",id:"clases-en-typescript",level:2},{value:"Relaci\xf3n entre tipos, interfaces y clases",id:"relaci\xf3n-entre-tipos-interfaces-y-clases",level:2},{value:"Aplicaci\xf3n de principios Clean y SOLID",id:"aplicaci\xf3n-de-principios-clean-y-solid",level:2},{value:"Referencias",id:"referencias",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"typescript-para-angular-tipos-interfaces-clases",children:"TypeScript para Angular: tipos, interfaces, clases"})}),"\n",(0,i.jsxs)(n.p,{children:["Angular est\xe1 construido sobre ",(0,i.jsx)(n.strong,{children:"TypeScript"}),", un superconjunto tipado de JavaScript que permite detectar errores antes de ejecutar el c\xf3digo, definir estructuras formales de datos, y aplicar principios de programaci\xf3n orientada a objetos (OOP) y funcional."]}),"\n",(0,i.jsxs)(n.p,{children:["Comprender y usar adecuadamente los ",(0,i.jsx)(n.strong,{children:"tipos, interfaces y clases"})," en TypeScript es esencial para escribir aplicaciones Angular robustas, mantenibles y seguras."]}),"\n",(0,i.jsx)(n.h2,{id:"por-qu\xe9-typescript-en-angular",children:"\xbfPor qu\xe9 TypeScript en Angular?"}),"\n",(0,i.jsx)(n.p,{children:"Angular requiere TypeScript porque:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Proporciona ",(0,i.jsx)(n.strong,{children:"tipado est\xe1tico"})," para evitar errores comunes"]}),"\n",(0,i.jsxs)(n.li,{children:["Mejora la experiencia con ",(0,i.jsx)(n.strong,{children:"autocompletado"})," y ",(0,i.jsx)(n.strong,{children:"refactorizaci\xf3n"})]}),"\n",(0,i.jsxs)(n.li,{children:["Permite trabajar con ",(0,i.jsx)(n.strong,{children:"decoradores"})," (",(0,i.jsx)(n.code,{children:"@Component"}),", ",(0,i.jsx)(n.code,{children:"@Injectable"}),", etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:["Aplica principios de ",(0,i.jsx)(n.strong,{children:"POO moderna"})," (clases, herencia, encapsulamiento)"]}),"\n",(0,i.jsxs)(n.li,{children:["Hace posible implementar ",(0,i.jsx)(n.strong,{children:"principios SOLID"})," y patrones de dise\xf1o"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tipos-en-typescript",children:"Tipos en TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"Los tipos son la base del sistema de tipos de TypeScript. Sirven para restringir el tipo de datos que puede contener una variable o par\xe1metro. Los tipos son \xfatiles cuando necesitas restricciones simples, combinaciones, o uni\xf3n de tipos."}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-tipos-primitivos",children:"Ejemplo de tipos primitivos"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"let username: string = 'Carlos';\nlet age: number = 25;\nlet isAdmin: boolean = false;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-tipos-compuestos",children:"Ejemplo de tipos compuestos"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"let tags: string[] = ['angular', 'typescript'];\nlet tuple: [string, number] = ['item', 1];\nlet status: 'pending' | 'approved' | 'rejected' = 'approved';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-tipos-personalizados",children:"Ejemplo de tipos personalizados"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type Role = 'STUDENT' | 'TEACHER';\n\ntype UserID = number | string;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"interfaces-en-typescript",children:"Interfaces en TypeScript"}),"\n",(0,i.jsxs)(n.p,{children:["Una ",(0,i.jsx)(n.code,{children:"interface"})," describe la ",(0,i.jsx)(n.strong,{children:"forma de un objeto"}),". Es una de las herramientas m\xe1s usadas en Angular, especialmente para definir contratos de datos (por ejemplo, una entidad, un DTO o una respuesta de API)."]}),"\n",(0,i.jsx)(n.p,{children:"Por ejemplo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"export interface Student {\n  id: number;\n  fullName: string;\n  email: string;\n  enrolled: boolean;\n}\n\nconst newStudent: Student = {\n  id: 1,\n  fullName: 'Ana G\xf3mez',\n  email: 'ana@usta.edu.co',\n  enrolled: true,\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Con las interfaces podemos aplicar conceptos de POO como la herencia:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"interface Person {\n  name: string;\n  email: string;\n}\n\ninterface Teacher extends Person {\n  subject: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Las interfaces permiten aplicar polimorfismo, composici\xf3n y cumplir con el principio de sustituci\xf3n de Liskov (SOLID)."}),"\n",(0,i.jsx)(n.h2,{id:"clases-en-typescript",children:"Clases en TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"Las clases permiten definir plantillas de objetos con l\xf3gica. Son esenciales en Angular para:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Servicios (",(0,i.jsx)(n.code,{children:"@Injectable"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Componentes (",(0,i.jsx)(n.code,{children:"@Component"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Pipes (",(0,i.jsx)(n.code,{children:"@Pipe"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Repositorios"}),"\n",(0,i.jsx)(n.li,{children:"Casos de uso"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Por ejemplo, as\xed se ver\xeda una clase simple:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"export class StudentModel {\n  constructor(\n    public id: number,\n    public name: string,\n    public enrolled: boolean\n  ) {}\n\n  toggleEnrollment(): void {\n    this.enrolled = !this.enrolled;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adicional podemos hacer uso de interfaces para implementarlas en las clases:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"export interface Enrollable {\n  toggleEnrollment(): void;\n}\n\nexport class Student implements Enrollable {\n  constructor(public id: number, public name: string, public enrolled: boolean) {}\n\n  toggleEnrollment() {\n    this.enrolled = !this.enrolled;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"relaci\xf3n-entre-tipos-interfaces-y-clases",children:"Relaci\xf3n entre tipos, interfaces y clases"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Concepto"}),(0,i.jsx)(n.th,{children:"Se usa para..."}),(0,i.jsx)(n.th,{children:"Puede instanciarse"}),(0,i.jsx)(n.th,{children:"Permite l\xf3gica"}),(0,i.jsx)(n.th,{children:"Extiende otros"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"type"})}),(0,i.jsx)(n.td,{children:"Tipos simples o combinados"}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:"\u2705 (via union)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"interface"})}),(0,i.jsx)(n.td,{children:"Estructura de objetos o contratos"}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:"\u2705"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"class"})}),(0,i.jsx)(n.td,{children:"Modelos de l\xf3gica + datos"}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"\u2705"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"aplicaci\xf3n-de-principios-clean-y-solid",children:"Aplicaci\xf3n de principios Clean y SOLID"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S (Single Responsibility):"})," las interfaces y clases tienen una \xfanica responsabilidad (modelo, servicio, vista)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"O (Open/Closed):"})," puedes extender interfaces o clases sin modificarlas."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"L (Liskov):"})," puedes sustituir implementaciones concretas por interfaces."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"I (Interface Segregation):"})," puedes definir peque\xf1as interfaces espec\xedficas."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"D (Dependency Inversion):"})," Angular inyecta dependencias a trav\xe9s de interfaces o tokens."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Microsoft. (2024). ",(0,i.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/",children:"TypeScript Handbook."})]}),"\n",(0,i.jsxs)(n.li,{children:["Angular Team. (2024). ",(0,i.jsx)(n.a,{href:"https://angular.dev/guide/typescript",children:"Angular & TypeScript Integration."})]}),"\n",(0,i.jsx)(n.li,{children:"Freeman, E., & Robson, E. (2020). Head First Object-Oriented Analysis and Design. O\u2019Reilly."}),"\n",(0,i.jsxs)(n.li,{children:["Brown, S. (2021). ",(0,i.jsx)(n.a,{href:"https://leanpub.com/clean-angular-architecture",children:"Clean Architecture with Angular and TypeScript."})," Leanpub."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);