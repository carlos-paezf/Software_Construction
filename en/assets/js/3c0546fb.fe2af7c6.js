"use strict";(self.webpackChunksoftware_construction=self.webpackChunksoftware_construction||[]).push([[942],{3959:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"angular_from_scratch/state_management_in_forms","title":"Manejo de estados en formularios","description":"En Angular, los formularios (y cada uno de sus controles) tienen propiedades que describen su estado actual. Esto permite saber si un formulario es v\xe1lido, si ha sido modificado o si el usuario ha interactuado con \xe9l.","source":"@site/docs/03_angular_from_scratch/14_state_management_in_forms.md","sourceDirName":"03_angular_from_scratch","slug":"/angular_from_scratch/state_management_in_forms","permalink":"/Software_Construction/en/docs/angular_from_scratch/state_management_in_forms","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03_angular_from_scratch/14_state_management_in_forms.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14},"sidebar":"tutorialSidebar","previous":{"title":"Validaci\xf3n de formularios (sincr\xf3nica y asincr\xf3nica)","permalink":"/Software_Construction/en/docs/angular_from_scratch/form_validation_synchronous_and_asynchronous"},"next":{"title":"Ejercicios propuestos por tema","permalink":"/Software_Construction/en/docs/angular_from_scratch/exercise"}}');var r=s(4848),a=s(8453);const i={sidebar_position:14},l="Manejo de estados en formularios",d={},c=[{value:"Estados en Template-Driven Forms",id:"estados-en-template-driven-forms",level:2},{value:"Estados en Reactive Forms",id:"estados-en-reactive-forms",level:2},{value:"Cambiar estados manualmente",id:"cambiar-estados-manualmente",level:2},{value:"Estados a nivel de formulario <code>FormGroup</code>",id:"estados-a-nivel-de-formulario-formgroup",level:2},{value:"Flujo de ciclo de estados",id:"flujo-de-ciclo-de-estados",level:2},{value:"Secuencia de estados",id:"secuencia-de-estados",level:2},{value:"Buenas pr\xe1cticas",id:"buenas-pr\xe1cticas",level:2},{value:"Resumen de los estados",id:"resumen-de-los-estados",level:2},{value:"Referencias",id:"referencias",level:2}];function t(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"manejo-de-estados-en-formularios",children:"Manejo de estados en formularios"})}),"\n",(0,r.jsxs)(n.p,{children:["En Angular, los ",(0,r.jsx)(n.strong,{children:"formularios (y cada uno de sus controles)"})," tienen propiedades que describen su ",(0,r.jsx)(n.strong,{children:"estado actual"}),". Esto permite saber si un formulario es v\xe1lido, si ha sido modificado o si el usuario ha interactuado con \xe9l."]}),"\n",(0,r.jsx)(n.p,{children:"Principales estados de un FormControl:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Validaci\xf3n:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valid"}),": El control o formulario ",(0,r.jsx)(n.strong,{children:"cumple con todas las validaciones"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"invalid"}),": Alguna validaci\xf3n falla."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Interacci\xf3n:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"touched"}),": El usuario ha ",(0,r.jsx)(n.strong,{children:"entrado y salido"})," del campo (blur)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"untouched"}),": El usuario ",(0,r.jsx)(n.strong,{children:"a\xfan no ha interactuado"})," con el campo."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dirty"}),": El usuario ",(0,r.jsx)(n.strong,{children:"ha modificado el valor"})," del control."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pristine"}),": El valor ",(0,r.jsx)(n.strong,{children:"no ha cambiado"})," desde su inicializaci\xf3n."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Disponibilidad:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"enabled"}),": El control ",(0,r.jsx)(n.strong,{children:"est\xe1 disponible"})," para la interacci\xf3n del usuario."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"disabled"}),": El control ",(0,r.jsx)(n.strong,{children:"no est\xe1 disponible"})," para la interacci\xf3n del usuario."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Pendiente de validaci\xf3n asincr\xf3nica:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pending"}),": Indica que hay ",(0,r.jsx)(n.strong,{children:"validaciones asincr\xf3nicas"})," en curso."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"estados-en-template-driven-forms",children:"Estados en Template-Driven Forms"}),"\n",(0,r.jsxs)(n.p,{children:["Angular expone estas propiedades a trav\xe9s de las directivas ",(0,r.jsx)(n.code,{children:"ngForm"}),", ",(0,r.jsx)(n.code,{children:"ngModel"})," y ",(0,r.jsx)(n.code,{children:"ngModelGroup"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<form #f="ngForm">\n  <input name="email" ngModel required #email="ngModel" />\n\n  <div *ngIf="email.invalid && email.touched">\n    El email es obligatorio\n  </div>\n\n  <p>Estado: {{ email.dirty ? \'Modificado\' : \'Sin cambios\' }}</p>\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Propiedades disponibles en ",(0,r.jsx)(n.code,{children:"ngModel"})," o ",(0,r.jsx)(n.code,{children:"ngForm"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valid"}),", ",(0,r.jsx)(n.code,{children:"invalid"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"touched"}),", ",(0,r.jsx)(n.code,{children:"untouched"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dirty"}),", ",(0,r.jsx)(n.code,{children:"pristine"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"pending"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"estados-en-reactive-forms",children:"Estados en Reactive Forms"}),"\n",(0,r.jsxs)(n.p,{children:["En Reactive Forms, cada ",(0,r.jsx)(n.code,{children:"FormControl"}),", ",(0,r.jsx)(n.code,{children:"FormGroup"})," y ",(0,r.jsx)(n.code,{children:"FormArray"})," expone los mismos estados:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"this.form = this.fb.group({\n  email: ['', Validators.required]\n});\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:"showLineNumbers",children:'<form [formGroup]="form">\n  <input formControlName="email" />\n  <div *ngIf="form.get(\'email\')?.invalid && form.get(\'email\')?.touched">\n    El email es obligatorio\n  </div>\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["El acceso en TypeScript a los estados de cada control es mediante ",(0,r.jsx)(n.code,{children:"get()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"const emailControl = this.form.get('email');\nconsole.log(emailControl?.valid);     // true o false\nconsole.log(emailControl?.dirty);     // true o false\nconsole.log(emailControl?.touched);   // true o false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cambiar-estados-manualmente",children:"Cambiar estados manualmente"}),"\n",(0,r.jsx)(n.p,{children:"Angular permite forzar el cambio de estado:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const control = this.form.get('email');\n\n// Marca el control como tocado\ncontrol?.markAsTouched();\n\n// Marca el control como modificado\ncontrol?.markAsDirty();\n\n// Marca el control como intacto\ncontrol?.markAsPristine();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Esto es \xfatil para mostrar mensajes de validaci\xf3n ",(0,r.jsx)(n.strong,{children:"sin necesidad de que el usuario interact\xfae primero"}),"."]}),"\n",(0,r.jsxs)(n.h2,{id:"estados-a-nivel-de-formulario-formgroup",children:["Estados a nivel de formulario ",(0,r.jsx)(n.code,{children:"FormGroup"})]}),"\n",(0,r.jsxs)(n.p,{children:["Un ",(0,r.jsx)(n.code,{children:"FormGroup"})," es ",(0,r.jsx)(n.strong,{children:"v\xe1lido solo si todos sus hijos son v\xe1lidos"}),". Sus propiedades (",(0,r.jsx)(n.code,{children:"valid"}),", ",(0,r.jsx)(n.code,{children:"dirty"}),", etc.) dependen de los controles que contiene."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"console.log(this.form.valid);      // true si todos los controles son v\xe1lidos\nconsole.log(this.form.touched);    // true si alguno fue tocado\n"})}),"\n",(0,r.jsx)(n.h2,{id:"flujo-de-ciclo-de-estados",children:"Flujo de ciclo de estados"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart TD\n    A[Campo inicializado: pristine + untouched] --\x3e|Usuario escribe| B[dirty]\n    B --\x3e|Usuario sale del campo| C[touched]\n    C --\x3e D{Valido?}\n    D --\x3e|S\xed| E[valid]\n    D --\x3e|No| F[invalid]\n    F --\x3e|Usuario corrige| E"}),"\n",(0,r.jsx)(n.h2,{id:"secuencia-de-estados",children:"Secuencia de estados"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    actor Usuario\n    participant FormControl\n    participant Angular as Motor de Formularios (Angular)\n\n    Usuario->>FormControl: Abre formulario (sin interacci\xf3n)\n    FormControl--\x3e>Angular: Estado inicial: pristine + untouched + (valid/invalid)\n\n    Usuario->>FormControl: Escribe o modifica un valor\n    FormControl->>Angular: Marca como dirty (dej\xf3 de ser pristine)\n    Angular--\x3e>FormControl: Ejecuta validaciones (sincr\xf3nicas)\n\n    Usuario->>FormControl: Cambia de campo (blur)\n    FormControl->>Angular: Marca como touched (dej\xf3 de ser untouched)\n    Angular--\x3e>FormControl: Actualiza valid o invalid seg\xfan validaciones\n\n    alt Validaciones asincr\xf3nicas pendientes\n        Angular->>FormControl: Marca estado pending\n        Angular->>Servidor: Solicita validaci\xf3n externa (API)\n        Servidor--\x3e>Angular: Devuelve respuesta\n        Angular--\x3e>FormControl: Actualiza estado (valid o invalid)\n    end\n\n    Usuario->>FormControl: Env\xeda el formulario (submit)\n    Angular->>FormControl: Si hay campos untouched, se marcan touched\n    Angular--\x3e>Usuario: Muestra mensajes de error de controles invalid\n    Angular--\x3e>Usuario: Si todo es valid, procesa el formulario"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"El usuario ingresa al componente y abre el formulario"}),"\n",(0,r.jsx)(n.li,{children:"Mientras el usuario no tenga ninguna interacci\xf3n con el formulario, el estado inicial es pristine + untouched + (valid/invalid) (este \xfaltimo depende del estado inicial que se le programa)."}),"\n",(0,r.jsx)(n.li,{children:"El usuario interact\xfaa con el formulario, escribiendo o modificando un valor."}),"\n",(0,r.jsxs)(n.li,{children:["El ",(0,r.jsx)(n.code,{children:"FormControl"})," actualiza su estado a ",(0,r.jsx)(n.code,{children:"dirty"}),", dado que sus valores iniciales ya no son iguales al actual."]}),"\n",(0,r.jsxs)(n.li,{children:["El motor de formularios de Angular ejecuta las validaciones (sincr\xf3nicas) y actualiza el estado del ",(0,r.jsx)(n.code,{children:"FormControl"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Cuando el usuario cambia de campo (blur), es decir, cuando el cursor sale del campo."}),"\n",(0,r.jsxs)(n.li,{children:["El ",(0,r.jsx)(n.code,{children:"FormControl"})," actualiza su estado a ",(0,r.jsx)(n.code,{children:"touched"}),", dado que ya ha sido interactuado."]}),"\n",(0,r.jsxs)(n.li,{children:["Seg\xfan las validaciones del motor de Angular, se actualiza el estado del ",(0,r.jsx)(n.code,{children:"FormControl"})," a ",(0,r.jsx)(n.code,{children:"valid"})," o ",(0,r.jsx)(n.code,{children:"invalid"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si hay validaciones as\xedncronas se empieza una secuencia interna. Mientras est\xe9n activas las validaciones as\xedncronas, el estado del ",(0,r.jsx)(n.code,{children:"FormControl"})," es ",(0,r.jsx)(n.code,{children:"pending"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Se solicita la validaci\xf3n externa (API) y se espera a que se devuelva la respuesta."}),"\n",(0,r.jsx)(n.li,{children:"Cuando el servidor devuelve la respuesta, el motor de formularios responde hacia el FormControl."}),"\n",(0,r.jsxs)(n.li,{children:["El estado del FormControl se actualiza a ",(0,r.jsx)(n.code,{children:"valid"})," o ",(0,r.jsx)(n.code,{children:"invalid"})," seg\xfan la respuesta del servidor."]}),"\n",(0,r.jsx)(n.li,{children:"En usuario decide enviar el formulario (submit)."}),"\n",(0,r.jsxs)(n.li,{children:["Si hay campos que no han sido interactuados (",(0,r.jsx)(n.code,{children:"untouched"}),"), se marcan como ",(0,r.jsx)(n.code,{children:"touched"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["En caso de que hayan errores, se muestran los mensajes de error de los controles ",(0,r.jsx)(n.code,{children:"invalid"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Si todo es valido, entonces, el formulario se procesa y el usuario puede ver el resultado de la operaci\xf3n."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"buenas-pr\xe1cticas",children:"Buenas pr\xe1cticas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.strong,{children:"touched"})," para mostrar mensajes de error ",(0,r.jsx)(n.strong,{children:"solo cuando el usuario abandona el campo"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.strong,{children:"dirty"})," para detectar si el usuario ha modificado el formulario."]}),"\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.strong,{children:"pending"})," para mostrar indicadores de carga en validaciones asincr\xf3nicas."]}),"\n",(0,r.jsxs)(n.li,{children:["Para enviar formularios, comprueba siempre el estado ",(0,r.jsx)(n.strong,{children:"valid"})," del ",(0,r.jsx)(n.code,{children:"FormGroup"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"resumen-de-los-estados",children:"Resumen de los estados"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Estado"}),(0,r.jsx)(n.th,{children:"\xbfQu\xe9 indica?"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pristine"})}),(0,r.jsx)(n.td,{children:"El valor no ha cambiado desde su creaci\xf3n"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dirty"})}),(0,r.jsx)(n.td,{children:"El valor ha sido modificado"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"untouched"})}),(0,r.jsx)(n.td,{children:"El usuario no ha interactuado con el campo"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"touched"})}),(0,r.jsx)(n.td,{children:"El usuario ha entrado y salido del campo"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"valid"})}),(0,r.jsx)(n.td,{children:"Pasa todas las validaciones"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"invalid"})}),(0,r.jsx)(n.td,{children:"Falla al menos una validaci\xf3n"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pending"})}),(0,r.jsx)(n.td,{children:"Hay validaciones asincr\xf3nicas en curso"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Angular Team. (2024). ",(0,r.jsx)(n.a,{href:"https://angular.dev/guide/forms",children:"Form control state and status"}),". Angular.dev."]}),"\n",(0,r.jsxs)(n.li,{children:["Netanel Basal. (2023). ",(0,r.jsx)(n.a,{href:"https://netbasal.com",children:"Angular Form States Explained"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Brown, S. (2024). Clean Angular Architecture. Leanpub."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var o=s(6540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);